#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import urllib2
import re

import_url = "https://raw.githubusercontent.com/Palakis/obs-websocket/master/PROTOCOL.md"

if __name__ == '__main__':
    file = urllib2.urlopen(import_url)
    data = file.read()
    file.close()
    
    target = None
    tvars = None
    
    name = ""
    vars_in = []
    vars_out = []
    
    events = []
    requests = []
    
    for l in data.split("\n"):
        if len(l)<3:
            continue
        #print "< %s"%(l)
            
        if l == "### Event Types":
            target = events
            
        elif l == "### Request Types":
            target = requests
             
        elif l == "---":
            if name == "":
                continue

            target.append((name, vars_in, vars_out))
            
            name = ""
            vars_in = []
            vars_out = []
            tvars = None
            
        elif l[0] == '#':
            m = re.match('^#### \"?([A-Za-z0-9]+)\"?', l)
            if m:
                name = m.group(1)
                tvars = vars_out # Default for events
     
        elif l[0] == '_':
            if l[:9] == "__Request":
                tvars = vars_in
            elif l[:10] == "__Response":
                tvars = vars_out
            
                
        elif l[0] == '-' and not tvars is None:
            m = re.match('^\- \*\*\"?([a-z0-9\-]+)\"?\*\*', l)
            if m:
                tvars.append(m.group(1))
        

    for datatype, data in [('Event',events),('Request', requests)]:
        print "%s: %r"%(datatype, data)
        
        file = open("obswebsocket/%ss.py"%(datatype.lower()),"w") 
         
        file.write("#!/usr/bin/env python\n") 
        file.write("# -*- coding: utf-8 -*-\n") 
        file.write("\n")
        file.write("### THIS FILE WAS GENERATED BY ./generate_classes.py - DO NOT EDIT ###\n")
        file.write("\n")
        file.write("from . import base_classes\n") 
        file.write("\n")
        
        for name, vin, vout in data:
            file.write("class %s(base_classes.Base%s):\n"%(name, datatype))
            file.write("    def __init__(%s):\n"%(", ".join(['self']+vin)))
            file.write("        base_classes.Base%s.__init__(self)\n"%(datatype))
            file.write("        self.name = \"%s\"\n"%(name))
            for v in vin:
                file.write("        self.datain[\"%s\"] = %s\n"%(v,v))
            for v in vout:
                file.write("        self.dataout[\"%s\"] = None\n"%(v))
            file.write("\n")
            for v in vout:
                cc = ''.join(x.capitalize() for x in v.split('-'))
                file.write("    def get%s(self):\n"%(cc))
                file.write("        return self.dataout[\"%s\"]\n"%(v))
                file.write("\n")
            file.write("\n")
         
        file.close() 


